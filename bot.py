import os
import asyncio
import instaloader
import shutil
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

TOKEN = os.getenv("TELEGRAM_TOKEN")
INSTA_USERNAME = "test85046"
INSTA_PASSWORD = "Testtest1234567890"
SESSION_FILE = "sessionfile"

L = instaloader.Instaloader()

def login_instagram():
    try:
        if os.path.exists(SESSION_FILE):
            L.load_session_from_file(INSTA_USERNAME, SESSION_FILE)
            print("–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        else:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å {INSTA_USERNAME}")
            L.login(INSTA_USERNAME, INSTA_PASSWORD)
            L.save_session_to_file(SESSION_FILE)
            print("–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        raise

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="download"), InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "download":
        await query.edit_message_text("üì• –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:")
    elif query.data == "help":
        await query.edit_message_text("‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–ª–∏ —Ä–∏–ª. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ.")

async def download_video(url, update, context):
    try:
        shortcode = url.split("/")[-2] if url.endswith("/") else url.split("/")[-1].split("?")[0]
        post = instaloader.Post.from_shortcode(L.context, shortcode)
        if not post.is_video:
            raise Exception("–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ.")
        
        if os.path.exists("downloads"):
            shutil.rmtree("downloads")
        os.makedirs("downloads")
        
        L.dirname_pattern = "downloads/{shortcode}"
        await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...")

        async def fake_progress():
            for i in range(0, 101, 20):
                await asyncio.sleep(1)
                await update.message.reply_text(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}%")

        asyncio.create_task(fake_progress())
        L.download_post(post, target="downloads")
        
        video_path = f"downloads/{shortcode}/{shortcode}.mp4"
        if not os.path.exists(video_path):
            raise Exception("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        with open(video_path, "rb") as video_file:
            await update.message.reply_video(video_file, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!")
        
        shutil.rmtree("downloads")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        if os.path.exists("downloads"):
            shutil.rmtree("downloads")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "instagram.com" in update.message.text:
        await download_video(update.message.text, update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞.")

def main():
    login_instagram()  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    port = int(os.environ.get("PORT", 5000))
    host = "0.0.0.0"
    app.run_webhook(listen=host, port=port, url_path=TOKEN, webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}")

if __name__ == "__main__":
    main()

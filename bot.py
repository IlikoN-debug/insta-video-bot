import os
import asyncio
import instaloader
import shutil
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode

# Telegram —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_TOKEN")

# Instagram –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
INSTA_USERNAME = "test85046"
INSTA_PASSWORD = "testtest1234567890"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Instaloader
L = instaloader.Instaloader()

# –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram
async def login_instagram():
    try:
        L.login(INSTA_USERNAME, INSTA_PASSWORD)
        print("–£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Instagram")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", callback_data="download")],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ Instagram.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "download":
        await query.edit_message_text("üì• –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram:")
    elif query.data == "help":
        await query.edit_message_text(
            "‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n"
            "1. –ù–∞–∂–º–∏ '–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ'\n"
            "2. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏–ª–∏ —Ä–∏–ª\n"
            "3. –î–æ–∂–¥–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)."
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
async def progress_callback(update, context, filename, total_size):
    def update_progress(downloaded, total):
        if total > 0:
            percent = int((downloaded / total) * 100)
            context.user_data["last_percent"] = percent
            asyncio.create_task(update.message.reply_text(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {percent}%"))

    L.download_progress_callback = update_progress

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
async def download_video(url, update, context):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º shortcode –∏–∑ URL
        shortcode = url.split("/")[-2] if url.endswith("/") else url.split("/")[-1].split("?")[0]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç
        post = instaloader.Post.from_shortcode(L.context, shortcode)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ
        if not post.is_video:
            raise Exception("–≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ.")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É downloads
        if os.path.exists("downloads"):
            shutil.rmtree("downloads")
        os.makedirs("downloads")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        L.dirname_pattern = "downloads/{shortcode}"
        await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        await progress_callback(update, context, f"{shortcode}.mp4", post.video_duration * 1024 * 1024)  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        L.download_post(post, target="downloads")
        
        # –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        video_path = f"downloads/{shortcode}/{shortcode}.mp4"
        if not os.path.exists(video_path):
            raise Exception("–§–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        with open(video_path, "rb") as video_file:
            await update.message.reply_video(video_file, caption="‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        shutil.rmtree("downloads")
        
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        if os.path.exists("downloads"):
            shutil.rmtree("downloads")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    
    if "instagram.com" in message_text:
        await download_video(message_text, update, context)
    else:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É Instagram. –û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    asyncio.run(login_instagram())
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render
    port = int(os.environ.get("PORT", 5000))
    host = "0.0.0.0"
    
    application.run_webhook(
        listen=host,
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )

if __name__ == "__main__":
    main()
